name: .NET Build and Test

# Builds and optionally tests a .NET project

on:
  workflow_call:
    inputs:
      project_path:
        required: true
        description: Set to relative path of the project folder to run builds within
        type: string
      label:
        required: false
        description: Optionally set to project name label to separate test report output steps
        type: string
        default: "none"
      test_project_path:
        required: false
        description: Use if test project is within another folder than the project_path.
        type: string
        default: "none"
      run_tests:
        description: Set to 'true' to execute .NET test step and report collection
        required: false
        default: false
        type: boolean
      use_submodules:
        description: Set to 'true' to use submodules. Requires use of secret defined PLATFORM_PAT_TOKEN and run job with 'secrets inherit'.
        required: false
        default: false
        type: boolean
      dotnet_version:
        description: Set to full version of .NET to use. By default 6.0.x
        required: false
        default: 6.0.x
        type: string
      report_coverage:
        description: Set to 'true' to generate coverage report. Requires use of secret defined CODECOV_TOKEN.
        required: false
        default: true
        type: boolean

jobs:
  build:
    name: Build and Test
    runs-on: ubuntu-latest

    steps:
      # Check out and get latest version of repo, either using submodules or not
      - name: Checkout repository (with submodules)
        if: ${{ inputs.use_submodules == true }}
        uses: actions/checkout@v2
        with:
          submodules: "true"
          token: ${{ secrets.PLATFORM_PAT_TOKEN }}

      - name: Checkout repository
        if: ${{ inputs.use_submodules == false }}
        uses: actions/checkout@v2

      # Install dependencies for .NET using default or specified version
      - name: Setup .NET Core
        uses: actions/setup-dotnet@v1
        with:
          dotnet-version: ${{ inputs.dotnet_version }}

      # Build the project or solution.
      - name: Build and restore
        run: |
          dotnet restore ${{ inputs.project_path }}
          dotnet build ${{ inputs.project_path }} --configuration Release --no-restore

      # Either use the solution file from the project path or a custom subfolder if specified
      - name: Set test project path
        if: ${{ inputs.run_tests == true }}
        run: |
          if [[ '${{ inputs.test_project_path }}' == 'none' ]]; then
              echo "TEST_PROJECT_PATH=${{ inputs.project_path }}" >> "$GITHUB_ENV"
          else
              echo "TEST_PROJECT_PATH=${{ inputs.test_project_path }}" >> "$GITHUB_ENV"
          fi

      # Execute the unit tests
      - name: Run unit tests
        if: ${{ inputs.run_tests == true }}
        run: dotnet test ${{ env.TEST_PROJECT_PATH }} --configuration Debug --logger "trx;LogFileName=test-results.trx"

      # A custom label can be generated to differentiate between multiple tests in the same action run
      - name: Set test report label
        if: ${{ inputs.run_tests == true }}
        run: |
          if [[ '${{ inputs.label }}' == 'none' ]]; then
              echo "TEST_PROJECT_NAME=Test Report" >> "$GITHUB_ENV"
          else
              echo "TEST_PROJECT_NAME=${{ inputs.label }} / Test Report" >> "$GITHUB_ENV"
          fi

      # Locate the output file, so that the user does not have to specify path implicitly
      - name: Find test report file
        id: find
        if: ${{ inputs.run_tests == true }}
        run: |
          echo "::set-output name=file::$(find ${{ env.TEST_PROJECT_PATH }} -name '*.trx')"

      # Test report is generated and uploaded to the Git action run
      - name: Show test report
        uses: dorny/test-reporter@v1
        if: ${{ inputs.run_tests == true }}
        with:
          name: ${{ env.TEST_PROJECT_NAME}}
          path: ${{ steps.find.outputs.file }}
          reporter: dotnet-trx
          only-summary: "false"
          list-suites: "all"
          list-tests: "all"
          max-annotations: "50"
          fail-on-error: "true"

      # Execute coverage for unit tests
      - name: Run coverage tests
        if: ${{ inputs.report_coverage == true }}
        run: dotnet test ${{ env.TEST_PROJECT_PATH }} --configuration Debug --no-build --verbosity normal --collect:"XPlat Code Coverage" --results-directory ./coverage

      # Report coverage summary to the user
      - name: Code Coverage Report
        uses: irongut/CodeCoverageSummary@v1.3.0
        if: ${{ inputs.report_coverage == true }}
        with:
          filename: coverage/**/coverage.cobertura.xml
          badge: true
          fail_below_min: false
          format: markdown
          hide_branch_rate: false
          hide_complexity: true
          indicators: true
          output: both
          thresholds: "60 80"

      # Code coverage report is generated and uploaded to Codecov
      - name: Upload coverage report
        uses: codecov/codecov-action@v3
        if: ${{ inputs.report_coverage == true }}
        env:
          CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}

  create-issue:
    name: Create Issue
    runs-on: ubuntu-latest
    needs: build
    if: failure()

    steps:
      # An issue is created and assigned to the user if either the build fails, one or more unit tests fails
      - name: Create issue when build fails
        uses: dacbd/create-issue-action@main
        with:
          token: ${{ github.token }}
          title: .NET build/test failure
          body: |
            ### Context
            [Failed Run](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})
            [Codebase](https://github.com/${{ github.repository }}/tree/${{ github.sha }})
            Workflow name - `${{ github.workflow }}`
          assignees: ${{github.actor}}
